#include "DetectorConstruction.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"
#include "G4VisAttributes.hh"
#include "G4RotationMatrix.hh"
#include "G4ThreeVector.hh"

DetectorConstruction::DetectorConstruction()
 : fWorld(nullptr), fDet1Physical(nullptr), fDet2Physical(nullptr),
   fDet2Logical(nullptr), fWorldLogical(nullptr),
   fDet2Angle(0.), fDet2Radius(17.4*cm) {}

DetectorConstruction::~DetectorConstruction() {}

G4VPhysicalVolume* DetectorConstruction::Construct() {
    auto nist = G4NistManager::Instance();

    // --- World ---
    auto worldMat = nist->FindOrBuildMaterial("G4_AIR");
    auto worldSize = 2.0*m;
    auto worldSolid = new G4Box("World", worldSize/2, worldSize/2, worldSize/2);
    fWorldLogical = new G4LogicalVolume(worldSolid, worldMat, "World");
    fWorld = new G4PVPlacement(nullptr, G4ThreeVector(), fWorldLogical, "World", 0, false, 0);
    fWorldLogical->SetVisAttributes(G4VisAttributes::GetInvisible());

    // --- Source (Na-22) ---
    auto Na22 = nist->FindOrBuildMaterial("G4_Galactic");
    auto sourceSolid = new G4Tubs("Source", 0., 2*mm, 2*mm, 0., 360.*deg);
    auto sourceLogical = new G4LogicalVolume(sourceSolid, Na22, "Source");
    new G4PVPlacement(nullptr, G4ThreeVector(0,0,10*cm), sourceLogical, "Source", fWorldLogical, false, 0);
    sourceLogical->SetVisAttributes(new G4VisAttributes(G4Colour::Yellow()));

    // --- Lead Shield with Slit ---
    auto lead = nist->FindOrBuildMaterial("G4_Pb");
    G4double shield_thick = 20*mm, shield_h = 40*mm, shield_w = 40*mm, slit_w = 2*mm;

    auto block1 = new G4Box("Block1", (shield_w-slit_w)/2, shield_thick/2, shield_h/2);
    auto block2 = new G4Box("Block2", (shield_w-slit_w)/2, shield_thick/2, shield_h/2);
    auto block1LV = new G4LogicalVolume(block1, lead, "Block1LV");
    auto block2LV = new G4LogicalVolume(block2, lead, "Block2LV");

    new G4PVPlacement(nullptr, G4ThreeVector(-(slit_w+(shield_w-slit_w))/2,0,5*cm),
                      block1LV,"Block1",fWorldLogical,false,0);
    new G4PVPlacement(nullptr, G4ThreeVector((slit_w+(shield_w-slit_w))/2,0,5*cm),
                      block2LV,"Block2",fWorldLogical,false,0);
    block1LV->SetVisAttributes(new G4VisAttributes(G4Colour::Gray()));
    block2LV->SetVisAttributes(new G4VisAttributes(G4Colour::Gray()));

    // --- First Detector at origin ---
    auto detMat = nist->FindOrBuildMaterial("G4_Si");
    auto detSolid = new G4Tubs("Det", 0., 25*mm, 25*mm, 0., 360*deg);
    auto det1Logical = new G4LogicalVolume(detSolid, detMat, "Det1");
    auto rot1 = new G4RotationMatrix();
    rot1->rotateX(90*deg);  // upright along X
    fDet1Physical = new G4PVPlacement(rot1, G4ThreeVector(), det1Logical,
                                      "Det1", fWorldLogical, false, 0);
    det1Logical->SetVisAttributes(new G4VisAttributes(G4Colour::Blue()));

    // --- Second Detector (perpendicular, rotate along circle) ---
    fDet2Logical = new G4LogicalVolume(detSolid, detMat, "Det2");
    UpdateDet2Placement(); // initial placement
    fDet2Logical->SetVisAttributes(new G4VisAttributes(G4Colour::Red()));

    return fWorld;
}

void DetectorConstruction::SetDet2Angle(G4double angleDeg) {
    fDet2Angle = angleDeg;
    UpdateDet2Placement();
}

void DetectorConstruction::UpdateDet2Placement() {
    if (fDet2Physical) {
        delete fDet2Physical;
        fDet2Physical = nullptr;
    }

    // Angle in radians
    G4double angleRad = fDet2Angle * CLHEP::deg;

    // Position on circle in XY plane
    G4ThreeVector pos(fDet2Radius * std::cos(angleRad),
                      fDet2Radius * std::sin(angleRad),
                      0);

    // Compute rotation so it points toward origin (Det1)
    G4RotationMatrix* rot = new G4RotationMatrix();
    G4ThreeVector dir = -pos.unit();  // vector pointing to origin
    rot->rotateY(std::atan2(dir.z(), dir.x())); // approximate
    rot->rotateZ(std::atan2(dir.y(), dir.x()));

    fDet2Physical = new G4PVPlacement(rot, pos, fDet2Logical,
                                      "Det2", fWorldLogical, false, 0, true);
}

