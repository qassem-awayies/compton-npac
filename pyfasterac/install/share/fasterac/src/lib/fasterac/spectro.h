
//
//  Spectro data definitions
//
//  Data generated by Faster MnM's : Trapezoid or CRRC4 Spectro modules (on Caras & Mosahr boards)
//


#ifndef SPECTRO_H
#define SPECTRO_H 1

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>

#include "fasterac/fasterac.h"

//  CONST

  typedef enum {
    CRRC4_SPECTRO_TYPE_ALIAS   = 61,
    TRAPEZ_SPECTRO_TYPE_ALIAS  = 62,
    SPECTRO_COUNTER_TYPE_ALIAS = 70
  } spectro_const;

  static const char* CRRC4_SPECTRO_TYPE_NAME   = "CRRC4_SPECTRO";
  static const char* TRAPEZ_SPECTRO_TYPE_NAME  = "TRAPEZ_SPECTRO";
  static const char* SPECTRO_COUNTER_TYPE_NAME = "SPECTRO_COUNTER";

//  DATA DEFINITIONS

  typedef struct crrc4_spectro {     //  from CRRC4_Spectro_Caras or CRRC4_Spectro_Mosahr
    unsigned pad1      : 10;
    signed   delta_t   : 16;
    unsigned pad2      :  6;
    signed   measure   : 22;
    unsigned pad3      :  8;
    unsigned saturated :  1;
    unsigned pileup    :  1;
  } crrc4_spectro;


  typedef struct trapez_spectro {    //  from Trapezoidal_Spectro_Caras or Trapezoidal_Spectro_Mosahr
    signed   measure   : 23;
    unsigned tdc       :  6;
    unsigned pileup    :  1;
    unsigned saturated :  1;
    unsigned sat_cpz   :  1;
  } trapez_spectro;


  typedef struct spectro_counter {   //  all kind of Spectro module
    unsigned calc : 32;
    unsigned sent : 32;
    unsigned trig : 32;
  } spectro_counter;

static size_t CRRC4_SPECTRO_TYPE_SIZE   = sizeof (crrc4_spectro  );
static size_t TRAPEZ_SPECTRO_TYPE_SIZE  = sizeof (trapez_spectro );
static size_t SPECTRO_COUNTER_TYPE_SIZE = sizeof (spectro_counter);

//  CONVERSION ACCESSORS

double crrc4_spectro_delta_t_ns  (crrc4_spectro data);

double trapez_spectro_conv_dt_ns (int tdc);

//  COUNTER tools
int spectro_counter_set_value   (faster_data_p data, unsigned int calc, unsigned int sent);

//  DATA TO STRING (used by faster_disfast)

static inline void crrc4_attributes_str (faster_data_p data, char* crrc4_str) {
  crrc4_spectro  crrc4_data;
  faster_data_load (data, &crrc4_data);
  sprintf (crrc4_str, "  delta_t=%.0lfns  meas=%d", crrc4_spectro_delta_t_ns (crrc4_data), crrc4_data.measure);
  if (crrc4_data.saturated) sprintf (crrc4_str, "%s  saturated", crrc4_str);
  if (crrc4_data.pileup)    sprintf (crrc4_str, "%s  pileup",    crrc4_str);
}

static inline void trapez_attributes_str (faster_data_p data, char* trapez_str) {
  long double     hr_clock;
  trapez_spectro  trapez_data;
  faster_data_load (data, &trapez_data);
  hr_clock = (long double) faster_data_clock_ns (data) + trapez_spectro_conv_dt_ns (trapez_data.tdc);
  sprintf (trapez_str, "  meas=%d  hr_clock=%.3Lfns", trapez_data.measure, hr_clock);
  if (trapez_data.saturated) sprintf (trapez_str, "%s  saturated", trapez_str);
  if (trapez_data.pileup)    sprintf (trapez_str, "%s  pileup",    trapez_str);
}

static inline void spectro_counter_attributes_str (faster_data_p data, char* count_str) {
  spectro_counter count;
  faster_data_load (data, &count);
  sprintf (count_str, "  calc=%d  sent=%d  trig=%d", count.calc, count.sent, count.trig);
}


#ifdef __cplusplus
}
#endif

#endif  // SPECTRO_H


